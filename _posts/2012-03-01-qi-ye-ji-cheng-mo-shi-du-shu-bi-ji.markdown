---
layout: post
title: "《企业集成模式》－读书笔记"
date: 2012-03-01 13:33
comments: true
categories: 
---
##引言
>1. 所有集成解决方案必须应对以下几个基本挑战:  
＊网络不可靠
＊网络速度慢
＊任何两个应用都是不同的
＊改变是难免的   
2. 开发人员使用以下四种主要方法克服上述挑战  
1.文件传输 2.共享数据库 3.远程过程调用 4.消息传递   
3. 从本质上讲，消息传递会经过五个步骤：  
1.创建 2.发送 3.传送 4.接收 5.处理  
[消息传递的步骤]
这个图还表达了两个重要的消息传递概念：  
1.发送并忽略
2.存储并转发  
4. 使用消息传递的特殊优点包括：  
＊远程通信 ＊平台/语言的集成 ＊异步通信 ＊可变的定时机制 ＊节流 ＊可靠的通信 ＊无连接运行 ＊仲裁 ＊线程管理
5. 异步消息传递带来的挑战  
＊复杂的编程模式 ＊序列问题 ＊同步问题 ＊性能 ＊有限的平台支持 ＊开发商锁定

##第一章 运用模式解决集成问题
>1. 集成（integration）就是连接计算机系统、公司或人。在许多集成项目中，我们反复地遇到以下六种类型的集成：  
＊信息门户 ＊数据复制 ＊共享的业务功能 ＊面向服务的体系架构 ＊分布式的业务过程 ＊企业到企业（B2B）的集成。**[p4]**
2. 利用公共数据格式、通过排队通道异步通信和转换器之类的机制，有助于把紧耦合的解决方案转变成松耦合的解决方案。发送者不再依赖于接收者的内部数据格式，也不再依赖接收者的位置，甚至不必关心其他计算机是否已经准备好接收请求。**[p9]**
3. 松耦合提供了很多重要的优点，如灵活性和可扩展性，但是它也带来了更复杂的编程模型，使得设计、构建和调试解决方案变的更加困难。**[p10]**
4. [图p10]
		* 由于应用的内部数据格式通常无法改变，因此中间件必须提供某种机制，把一个应用的数据格式转换成另一个应用得数据格式。这个步骤称为转换（translation）。
		* 我们可能希望每个应用都明确地制订数据经通道要发送到哪个目标系统（或者哪些目标系统）。随着系统数量的增加，每增加一个系统，客户关怀系统都要相应调整，以适应新环境。如果由中间件负责把消息发送到正确的位置，就会容易得多。这就是路由组件的作用，如消息代理（message broker）。
		* 为了掌握系统内部的运行机制，必须提供一个系统管理功能。这个子系统要监控数据流，确保所有应用和组件都在正常运行，并能向中心节点报告出错情况。
		* 到目前为止，有一个前提条件，这就是应用要把数据作为消息发送给通道。但是，大多数封装好的应用和遗留系统都没有打算要参与集成，而且许多定制应用也没有考虑过集成问题。为此，我们需要采用消息端点（message endpoint）把这些系统显示地连接到集成解决方案种。端点可能是一段特殊的代码，也可能是一个由集成软件开发商提供的通道适配器（Channel Adapter）。**[p10]**
5. 规范化数据模型（Canonical Data Model）定义了独立于特定应用的消息格式，因此所有应用都能采用这种公共的格式相互通信。如果一个应用的内部格式有变化，只是这个应用与公共消息通道之间的消息转换器需要修改，所有其他应用和消息转换器都不会受到影响。**[13]**
6. 把分解器、消息路由器和聚合器结合起来是很常见的一种用法。我们把它称为组合消息处理器（Composed Message Processor）。［图P16］**[P17]**
7. 发布－订阅通道有一项优点，可以添加额外的订购者而不会干扰原来的消息流，利用这一特征，就能够监听新的而且合法的订单，并把它们存储在一个消息存储库（MessageStore）中。然后就可以从消息存储数据库中查询订单的状态[图P18
]**[P18]**
8. 在消息流的的起始处把新订单消息保存在一个消息存储库中，后续的组件通过查询消息存储库就可以获得重要的消息数据，这样中间环节就不用携带这些数据了。我们把这一功能称为声明标签（Claim Check）-－消息可以“登记”数据，以便事后查询。这种方法的缺点是访问中心数据库不像采用异步消息通道发送消息那么可靠。**[P19]**
9. 采用消息存储库，还可以代替一个单独的聚合组件做出正确的决定。为了提高效率，可将消息存储库转换为一个过程管理器（Process Manager）。过程管理器是一个系统中的中心组件，用以管理消息流。它提供两个主要的功能：
		* 保存消息之间（一个“过程实例”中）的数据
		* 跟踪进度，并确定下一步的动作（通过使用一个过程模版）**[P19]**
10. 新的体系结构把所有的服务连接到一个公共的服务总线上，从而能被其他任何组件调用。每个请求/应答服务还需要支持返回地址（Return Address）的概念。基于返回地址，调用者（服务消费者）可以指定一个通道，服务要在这里发送应答消息。[图P20]**[P20]**
11. 如何确定这些业务动作的粒度及其相关的代价。细粒度需要执行过多的远程调用或发送大量的消息，存在很大的开销，致使系统运行缓慢，且我们还要处理消息之间的同步。细粒度的借口还会导致紧耦合。而粒度太粗会限制系统的灵活性，最好的做法是根据现实中的具体工作来权衡决定接口的粒度。**[P23]**

总结：
  
1. RestApi充当了服务总线的角色，管理一个消息存储库（或消息监控库），主要实现服务间的信息传递，在传递中负责路由以及信息格式的转换。同时扮演这过程管理器（存储，跟踪进度，判断下一步动作）和组合消息处理器的职责（provision）。  
2. 为了保持传递信息的稳定，必须先要制定规范化数据模型，保证信息传递以及转换前后都是以规范化数据模型的不同表现形式（xml，json,message..）呈现，再根据各系统概念模型定制其通道适配器进行模型适配。


##第二章 集成方式
>1. 应用集成的主要决策标准： ＊应用耦合 ＊干扰性 ＊技术选择 ＊数据格式 ＊数据的时间特性 ＊数据或功能 ＊远程通信 ＊可靠性**[P27]**
2. 应用集成的几种主要方式： ＊文件传输 ＊共享数据库 ＊远程过程调用 ＊消息传递**[P28]**
3. 文件是一种通用的存储机制，各种企业操作系统都提供了这种机制，而且得到了所有企业语言的支持。最简单的方法莫过于使用文件来集成应用**[P30]**
4. 使用文件的关键在于确定文件的格式。**[P30]**
5. 与文件相关的另一个问题是何时生产与消费文件。得到一个新文件时，应用往往无甚举动，而是在合适的时间才处理这个文件。**[P30]**
6. 文件系统具有的最大优点是集成人员不必了解应用的内部细节。不用的应用之间关系非常松散。每个应用可以自由的进行内部修改，而不会影响其他应用。**[P30]**
7. 采用文件传输的最明显的问题是很少完成更新，因此系统很可能不同步。当然，你可以把产生文件的频率提高。实际上，也可以把消息传递看作是文件传输，只要应用种出现数据修改就产生一个文件。现在的问题是如何管理已生成的文件，使他们能得到读取而不会丢失。基于文件的集成方法是做不到这一点的，这主要是因为处理一个文件需要付出昂贵的资源代价，所以不允许在短时间内产生大量的文件（否则就有可能丢失）。如果要使用非常细粒度的文件，更简单的做法是采用消息传递。**[P31]**
8. 为了加快数据的共享，并且保证一致的数据格式，可以使用共享数据库。要把应用的功能（而不是数据）集成起来，可以使用远程过程调用。为了能够频繁交换少量数据，以前一般使用远程调用，现在可以使用消息传递。**[P31]**
9. 如果所集成的所有应用都依赖于相同的数据库，那么可以肯定地说这些应用在任何时刻都能保持一致。从不同地应用对同一数据进行同时更新时，数据库的事务管理系统能非常妥善地管理好数据的一致性。由于更新的时间间隔很小，任何错误都能更容易地发现和更正。**[P32]**
10. 共享数据库面临的最大困难之一是，要为共享数据库提出一个合适的设计。另外，对共享数据库更大的限制来自外部的已封装应用。**[P33]**
11. 多个应用可能通过共享数据库频繁地读取和修改相同地数据，这会使数据库成为一个性能瓶颈，并且当每个应用都对数据完成互斥操作（既不允许其他应用访问数据）时，还会引起死锁。当应用分布在不同地位置、通过广域网访问同一个共享数据库时，访问速度可能过慢，以至于并不实用。分布式数据库如果存在锁定冲突，很容易在性能方面带来灾难。**[P33]**
12. 远程过程调用和本地过程调用在性能和可靠性方面存在显著的差异，还会将应用紧密地耦合在一起。**[P35]**
13. 运用消息传递，可以使用可定制的格式频繁地，立即地、可靠的、异步地传输数据包。**[P36]**
14. 通过频繁发送小消息，应用不仅能共享数据，还可以在操作上相互协作。**[P37]**
15. 尽管频繁的消息传递能减少文件传输遇到的许多不一致问题，但是并没有完全根除。如果系统未能同时更新，也会带来一些滞后问题。另外，在这种环境中，测试和调试也更加困难。**[P37]**
16. 利用消息传递能够转换消息，这有一个明显的好处，既有助于应用之间相互解耦合，而不像远程过程调用那样。但是这种独立性也意味着，继承人员必须编写大量麻烦的代码才能把不同的系统组合起来。**[P37]**

##第三章 消息传递系统
>1. 消息传递的基本概念：通道、消息、管道和过滤器、路由、转换、端点。**[P38]**
2. 一个消息由两个基本部分组成：消息首部、消息体。**[P44]**
3. 如果应用发送的信息在一个消息中容纳不下，可以把它划分为更小的单元，将各个部分作为一个消息序列（Message Sequence）发送。如果数据只是在一定的时间期限内有用，可以指定这样一个消息到期时间（Message Expiration）。由于消息的各种接收者和发送者必须对消息中的数据格式达成一致，可以把数据格式指定为规范数据类型（Canonical Data Modle）。**[P45]**
4. 使用管道和过滤器体系结构把较大的处理任务划分为一系列较小的独立处理步骤（过滤器），这些步骤由通道（管道）连接。**[P47]**
5. 管道和过滤器模式使用抽象管道使组件相互之间实现了解耦合。使用管道和过滤器还能提高可测试性，这一优点往往被我们忽视。**[P48]**
6. 管道和过滤器结构的一个潜在缺点是它需要大量通道。首先，通道并不是一种无限的资源，因为通道提供了数据缓冲等功能，这些都会消耗内存和占用CPU周期。其次，把消息发布到通道存在一定的开销，因为数据必须频繁的进行数据格式转换。**[P48]**
7. 流水线处理＋并行处理。整个系统的吞吐量受到处理链中最慢过程的制约。可以为该过程部署多个并发的实例来提高吞吐量。在这种情况下，需要采用有竞争消费者（Competing Consumer）的点对点的通道，来确保通道中的每个消息只能被N个可用处理器中的某一个消费（处理）。这样可以加快时间最紧张的处理步骤，进而提高整体的吞吐量。但是需要主义的是，采用这样的配置可能会引起消息处理顺序不正常。如果消息的顺序非常关键，则只能为每个组件运行一个实例，或者必须使用重排器（Resequencer）。**[P49]**
8. 消息通道实现了消息的发送者与接收者的解耦合，提供了一种非常基本的路由功能**[P53]**
9. 可以让接收组件自己决定是否处理到达一个公共消息通道的消息。但是这种做法是有问题的，因为消息一旦被消费，而组件又决定不对其进行处理，它将无法把消息重新放回通道让其他组件去处理。**[P53]**
10. 管道和过滤器的一项优点是单个组件的可组合性。**[P53]**
11. 插入一个特殊的过滤器，既消息路由器，它从一个消息通道中消费一个消息，然后根据一组条件把它重新发布到不同的消息通道中。**[P54]**
12. 消息路由器的一个固有特性是，它不会修改消息的内容，而只关心消息的目标。**[P54]**
13. 使用消息路由器的主要好处在于，决定消息目标的标准都在一个位置上维护。**[P54]**
14. 尽管消息路由器的目的是为了使组件解耦合，但是使用它却会带来相反的效果。为了把消息发送到正确的通道，消息路由器组件必须了解所有可能的目标通道。如果可能的目标通道列表经常改变，消息路由器就会称为维护的瓶颈。在这种情况下，让每个接收者自己选择感兴趣的消息可能更合适。可以使用一个发布－订阅通道和一个消息过滤器组件实现上述目的。我们把这两种选择方案分别称为预测型（predictive）路由和反应型（reactive）路由。**[P54]**
15. 由于消息路由器需要插入额外的处理步骤，这会降低系统的性能。和大多数好的工具一样，消息路由器也会被滥用。随意的使用消息路由器会把松耦合的优点变为缺点。**[P54]**
16. **[P57]**
